#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Motor {
public:
    int putere;
    string tip;

    Motor(int p = 0, string t = "") : putere(p), tip(t) {}

    friend ostream& operator<<(ostream& out, const Motor& m);
    friend istream& operator>>(istream& in, Motor& m);
};

ostream& operator<<(ostream& out, const Motor& m) {
    out << "Putere = " << m.putere << " CP, Tip = " << m.tip;
    return out;
}

istream& operator>>(istream& in, Motor& m) {
    cout << "Introduceti puterea motorului: ";
    in >> m.putere;
    cout << "Introduceti tipul motorului: ";
    in >> m.tip;
    return in;
}

class Masina {
public:
    string marca;
    int an_fabricatie;
    int pret;
    Motor motor;

    Masina(string m = "", int an = 0, int p = 0, Motor mot = Motor()) : marca(m), an_fabricatie(an), pret(p), motor(mot) {}

    virtual void afiseazaDetalii() const {
        cout << "Marca = " << marca << ", An fabricatie = " << an_fabricatie << ", Pret = " << pret << ", Motor = " << motor << endl;
    }

    friend ostream& operator<<(ostream& out, const Masina& m);
    friend istream& operator>>(istream& in, Masina& m);
};

ostream& operator<<(ostream& out, const Masina& m) {
    out << "Marca = " << m.marca << ", An fabricatie = " << m.an_fabricatie << ", Pret = " << m.pret << ", Motor = " << m.motor;
    return out;
}

istream& operator>>(istream& in, Masina& m) {
    cout << "Introduceti marca masinii: ";
    in >> m.marca;
    cout << "Introduceti anul de fabricatie: ";
    in >> m.an_fabricatie;
    cout << "Introduceti pretul masinii: ";
    in >> m.pret;
    in >> m.motor;
    return in;
}

class Proprietar {
public:
    string nume;
    int varsta;

    Proprietar(string n = "", int v = 0) : nume(n), varsta(v) {}

    virtual void afiseazaDetalii() const {
        cout << "Nume = " << nume << ", Varsta = " << varsta << endl;
    }

    friend ostream& operator<<(ostream& out, const Proprietar& p);
    friend istream& operator>>(istream& in, Proprietar& p);
};

ostream& operator<<(ostream& out, const Proprietar& p) {
    out << "Nume = " << p.nume << ", Varsta = " << p.varsta;
    return out;
}

istream& operator>>(istream& in, Proprietar& p) {
    cout << "Introduceti numele proprietarului: ";
    in >> p.nume;
    cout << "Introduceti varsta proprietarului: ";
    in >> p.varsta;
    return in;
}

class MasinaElectrica : public Masina {
public:
    int capacitate_baterie;
    string tip_incarcare;

    MasinaElectrica(string m = "", int an = 0, int p = 0, Motor mot = Motor(), int capacitate = 0, string incarcare = "") 
        : Masina(m, an, p, mot), capacitate_baterie(capacitate), tip_incarcare(incarcare) {}

    void afiseazaDetalii() const override {
        Masina::afiseazaDetalii();
        cout << "Capacitate baterie = " << capacitate_baterie << " kWh, Tip incarcare = " << tip_incarcare << endl;
    }
};

class ProprietarVIP : public Proprietar {
public:
    string tip_abonament;

    ProprietarVIP(string n = "", int v = 0, string tip_abonament = "") 
        : Proprietar(n, v), tip_abonament(tip_abonament) {}

    void afiseazaDetalii() const override {
        Proprietar::afiseazaDetalii();
        cout << "Tip abonament VIP = " << tip_abonament << endl;
    }
};

int main() {
    MasinaElectrica me1("Tesla", 2023, 50000, Motor(250, "Electric"), 100, "Rapid");
    ProprietarVIP p1("Ion Popescu", 35, "Gold");

    Masina *m1 = &me1;
    Proprietar *p2 = &p1;

    cout << "Detalii masina electrica (upcasting la Masina): " << endl;
    m1->afiseazaDetalii();

    cout << "Detalii proprietar VIP (upcasting la Proprietar): " << endl;
    p2->afiseazaDetalii();

    return 0;
}
